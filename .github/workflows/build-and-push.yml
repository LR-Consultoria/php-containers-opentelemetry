name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Build images monthly on the 1st at 2 AM UTC
    - cron: '0 2 1 * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.2', '8.3', '8.4']
        variant: ['fpm', 'swoole', 'nginx', 'frankenphp']
        platforms: ['linux/amd64']
        exclude:
          # Exclude combinations that don't exist
          - php-version: '8.4'
            variant: 'frankenphp'
        include:
          # Add ARM64 for main variants only
          - php-version: '8.3'
            variant: 'fpm'
            platforms: 'linux/arm64'
          - php-version: '8.3'
            variant: 'nginx'
            platforms: 'linux/arm64'
      fail-fast: false
      max-parallel: 2
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh
        ls -la scripts/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set image name
      id: image-name
      run: |
        # Convert repository owner to lowercase for Docker compatibility
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        echo "repo_owner=${REPO_OWNER_LOWER}" >> $GITHUB_OUTPUT
        if [ "${{ matrix.variant }}" = "fpm" ]; then
          echo "name=php-fpm" >> $GITHUB_OUTPUT
        else
          echo "name=php-${{ matrix.variant }}" >> $GITHUB_OUTPUT
        fi

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=${{ matrix.php-version }}-alpine
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.variant }}/Dockerfile
        platforms: ${{ matrix.platforms }}
        build-args: |
          PHP_VERSION=${{ matrix.php-version }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine-amd64
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.variant }}-${{ matrix.php-version }}
        cache-to: type=gha,scope=${{ matrix.variant }}-${{ matrix.php-version }},mode=max

    - name: Test image
      run: |
        # For PRs, test the locally built image
        # For pushes, test the pushed image
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "Testing locally built image for PR..."
          echo "Image name: ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine-amd64"
          echo "Repository owner: ${{ steps.image-name.outputs.repo_owner }}"
          echo "Image name: ${{ steps.image-name.outputs.name }}"
          echo "PHP version: ${{ matrix.php-version }}"
          echo "Variant: ${{ matrix.variant }}"
          
          # List all available images for debugging
          echo "All available images:"
          docker images
          echo ""
          echo "Images matching ${{ steps.image-name.outputs.name }}:"
          docker images | grep "${{ steps.image-name.outputs.name }}" || echo "No images found"
          
          # Use the locally built image name
          REGISTRY=${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }} ./scripts/test.sh ${{ matrix.php-version }} ${{ matrix.variant }} alpine-amd64
        else
          echo "Testing pushed image..."
          # Test the built image that was just pushed
          docker pull ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine-amd64
          
          # Run basic tests
          REGISTRY=${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }} ./scripts/test.sh ${{ matrix.php-version }} ${{ matrix.variant }} alpine-amd64
        fi

  build-extended:
    runs-on: ubuntu-latest
    needs: build-matrix
    if: github.event_name != 'pull_request' && success()
    strategy:
      matrix:
        include:
          # Add ARM64 for main variants
          - php-version: '8.3'
            variant: 'fpm'
            platforms: 'linux/arm64'
          - php-version: '8.3'
            variant: 'nginx'
            platforms: 'linux/arm64'
          # Other variants
          - php-version: '8.3'
            variant: 'swoole'
            platforms: 'linux/amd64'
          - php-version: '8.3'
            variant: 'frankenphp'
            platforms: 'linux/amd64'
          # PHP 8.2 (if needed)
          - php-version: '8.2'
            variant: 'fpm'
            platforms: 'linux/amd64'
          - php-version: '8.2'
            variant: 'nginx'
            platforms: 'linux/amd64'
      fail-fast: false
      max-parallel: 3
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh
        ls -la scripts/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set image name
      id: image-name
      run: |
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        echo "repo_owner=${REPO_OWNER_LOWER}" >> $GITHUB_OUTPUT
        if [ "${{ matrix.variant }}" = "fpm" ]; then
          echo "name=php-fpm" >> $GITHUB_OUTPUT
        else
          echo "name=php-${{ matrix.variant }}" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.variant }}/Dockerfile
        platforms: ${{ matrix.platforms }}
        build-args: |
          PHP_VERSION=${{ matrix.php-version }}
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine-${{ matrix.platforms == 'linux/amd64' && 'amd64' || 'arm64' }}
        cache-from: type=gha,scope=${{ matrix.variant }}-${{ matrix.php-version }}-${{ matrix.platforms }}
        cache-to: type=gha,scope=${{ matrix.variant }}-${{ matrix.php-version }}-${{ matrix.platforms }},mode=max

  create-manifests:
    runs-on: ubuntu-latest
    needs: [build-matrix, build-extended]
    if: github.event_name != 'pull_request' && success()
    strategy:
      matrix:
        include:
          - php-version: '8.3'
            variant: 'fpm'
          - php-version: '8.3'
            variant: 'nginx'
      max-parallel: 2
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set image name
      id: image-name
      run: |
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        echo "repo_owner=${REPO_OWNER_LOWER}" >> $GITHUB_OUTPUT
        if [ "${{ matrix.variant }}" = "fpm" ]; then
          echo "name=php-fpm" >> $GITHUB_OUTPUT
        else
          echo "name=php-${{ matrix.variant }}" >> $GITHUB_OUTPUT
        fi

    - name: Create and push multi-arch manifest
      run: |
        # Create multi-arch manifest
        docker manifest create \
          ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine \
          ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine-amd64 \
          ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine-arm64
        
        docker manifest push ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine
        
        # Create version without alpine suffix
        docker manifest create \
          ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }} \
          ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine-amd64 \
          ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine-arm64
        
        docker manifest push ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}
        
        # Create latest tag
        if [ "${{ matrix.php-version }}" = "8.3" ]; then
          docker manifest create \
            ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:latest \
            ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine-amd64 \
            ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine-arm64
          
          docker manifest push ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:latest
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: build-matrix
    if: github.event_name != 'pull_request' && success()
    strategy:
      matrix:
        variant: ['fpm', 'nginx']
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh
        ls -la scripts/

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/php-${{ matrix.variant }}:8.3-alpine
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  update-readme:
    runs-on: ubuntu-latest
    needs: [build-matrix, build-extended, create-manifests]
    if: github.event_name != 'pull_request' && success()
    
    permissions:
      contents: write
      packages: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh
        ls -la scripts/

    - name: Update README with latest image info
      run: |
        # Update README with latest image information
        echo "Updating README with latest image information..."
        # Add any README update logic here if needed

  cleanup:
    runs-on: ubuntu-latest
    needs: [build-matrix, build-extended, create-manifests, security-scan, update-readme]
    if: always()
    
    permissions:
      packages: write

    steps:
    - name: Cleanup old images
      run: |
        # Cleanup old images from registry
        echo "Cleaning up old images..."
        # Add cleanup logic here if needed
