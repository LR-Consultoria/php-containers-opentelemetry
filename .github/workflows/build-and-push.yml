name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Build images monthly on the 1st at 2 AM UTC
    - cron: '0 2 1 * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.2', '8.3', '8.4']
        variant: ['base', 'swoole', 'nginx', 'franken']
      fail-fast: false
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set image name
      id: image-name
      run: |
        # Convert repository owner to lowercase for Docker compatibility
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        echo "repo_owner=${REPO_OWNER_LOWER}" >> $GITHUB_OUTPUT
        if [ "${{ matrix.variant }}" = "base" ]; then
          echo "name=php-base" >> $GITHUB_OUTPUT
        else
          echo "name=php-${{ matrix.variant }}" >> $GITHUB_OUTPUT
        fi

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=${{ matrix.php-version }}-alpine
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.variant }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        build-args: |
          PHP_VERSION=${{ matrix.php-version }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine
          ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test image
      if: github.event_name != 'pull_request'
      run: |
        # Pull the built image
        docker pull ${{ env.REGISTRY }}/${{ steps.image-name.outputs.repo_owner }}/${{ steps.image-name.outputs.name }}:${{ matrix.php-version }}-alpine
        
        # Run basic tests
        ./scripts/test.sh ${{ matrix.php-version }} ${{ matrix.variant }} alpine

  security-scan:
    runs-on: ubuntu-latest
    needs: build-matrix
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        php-version: ['8.3'] # Only scan latest stable version
        variant: ['base', 'nginx']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set lowercase repository owner
      id: repo-info
      run: |
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        echo "repo_owner=${REPO_OWNER_LOWER}" >> $GITHUB_OUTPUT

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ steps.repo-info.outputs.repo_owner }}/php-${{ matrix.variant }}:${{ matrix.php-version }}-alpine'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  update-readme:
    runs-on: ubuntu-latest
    needs: build-matrix
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Update README with latest tags
      run: |
        # Update README with build timestamp
        sed -i "s/Last updated: .*/Last updated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')/" README.md

    - name: Commit README changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git diff --staged --quiet || git commit -m "Update README with latest build info"
        git push

  cleanup:
    runs-on: ubuntu-latest
    needs: [build-matrix, security-scan]
    if: always()
    
    steps:
    - name: Delete old packages
      uses: actions/delete-package-versions@v4
      with:
        package-name: php-base
        package-type: container
        min-versions-to-keep: 10
        delete-only-untagged-versions: true
